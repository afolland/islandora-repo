<?php

/**
 * @file
 * Custom RDF hooks.
 */

use Drupal\jsonld\Normalizer\NormalizerBase;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_rdf_namespaces().
 */
function asu_custom_rdf_rdf_namespaces() {
  return [
    'mods' => 'http://www.loc.gov/mods/modsrdf/v1#',
    'asu' => 'http://repository.lib.asu.edu/rdf/',
    'bf' => 'http://id.loc.gov/ontologies/bibframe/',
    'identifiers' => 'http://id.loc.gov/vocabulary/identifiers/',
    'barrettrelators' => 'http://id.loc.gov/vocabulary/relators/',
  ];
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function asu_custom_rdf_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  if (isset($normalized['@graph']) && is_array($normalized['@graph'])) {
    $current_rdf_mapping = $context['current_entity_rdf_mapping']->get('fieldMappings');
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    foreach ($normalized['@graph'][0] as $gk => $gv) {
      // Clean up the UID.
      if (array_key_exists('uid', $current_rdf_mapping)) {
        $predicate = $current_rdf_mapping['uid']['properties'][0];
        $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
        if ($gk === $predicate_normalized) {
          foreach ($gv as $k => $id) {
            if (array_key_exists('@value', $id) && array_key_exists('@id', $id) && (strpos($id['@id'], 'user') !== FALSE)) {
              unset($id['@id']);
              $gv[$k] = $id;
            }
          }
          $normalized['@graph'][0][$gk] = $gv;
        }
      }

      // Clean up empty boolean values.
      if (array_key_exists('field_open_access', $current_rdf_mapping)) {
        $predicate = $current_rdf_mapping['field_open_access']['properties'][0];
        $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
        if ($gk === $predicate_normalized) {
          foreach ($gv[0] as $k => $v) {
            if ($k === "@value" && $v === "") {
              unset($normalized['@graph'][0][$gk]);
            }
            if ($k === "@value" && $v != "") {
              $normalized['@graph'][0][$gk][0]["@language"] = "en";
            }
            if ($k === "@type") {
              unset($normalized['@graph'][0][$gk][0]["@type"]);
            }
          }
        }
      }

      // Change boolean type to language en.
      if (array_key_exists('status', $current_rdf_mapping)) {
        $predicate = $current_rdf_mapping['status']['properties'][0];
        $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
        if ($gk === $predicate_normalized) {
          foreach ($gv[0] as $k => $v) {
            if ($k === "@type") {
              $normalized['@graph'][0][$gk][0]["@language"] = "en";
              unset($normalized['@graph'][0][$gk][0]["@type"]);
            }
          }
        }
      }

      // Change boolean for peer reviewed to an @id, not a boolean/value.
      if (array_key_exists('field_peer_reviewed', $current_rdf_mapping)) {
        foreach ($current_rdf_mapping['field_peer_reviewed']['properties'] as $predicate) {
          $predicate_normalized = NormalizerBase::escapePrefix($predicate, $context['namespaces']);
          if ($gk === $predicate_normalized) {
            foreach ($gv as $this_key => $value_array) {
              foreach ($value_array as $k => $v) {
                if ($k === "@value" && $v === "") {
                  unset($normalized['@graph'][0][$gk][$this_key]);
                }
                elseif ($k === "@value" && $v != "") {
                  $normalized['@graph'][0][$gk][$this_key]['@id'] = $v;
                  unset($normalized['@graph'][0][$gk][$this_key]['@value']);
                }
                elseif ($k === "@type") {
                  unset($normalized['@graph'][0][$gk][$this_key]["@type"]);
                }
              }
            }
          }
        }
      }

      // Make sure paragraph mappings don't leave behind empty ids.
      if (is_array($gv)) {
        foreach ($gv as $key => $val) {
          if (is_array($val)) {
            foreach ($val as $kgv => $vgv) {
              if ($kgv === "@id" && $vgv === "") {
                unset($gv[$key][$kgv]);
                // @todo change current language to field language.
                $gv[$key]['@language'] = $lang;
                $normalized['@graph'][0][$gk] = $gv;
              }
            }
          }
        }
      }

    }

    // Handle typedmap.
    foreach ($current_rdf_mapping as $kmap => $vmap) {
      if (array_key_exists('datatype_callback', $vmap)) {
        $callback = $vmap['datatype_callback'];
        if ($callback['callable'] == 'Drupal\asu_custom_rdf\ParagraphMapping::typedmap') {
          $args = $callback['arguments'];
          // Get field value from $args['value_field'].
          foreach ($entity->get($kmap)->referencedEntities() as $paragraph) {
            $value = $paragraph->get($args['value_field'])->getValue();
            if (in_array(0, $value)) {
              $value = $value[0]['value'];
            }

            // Get the type from the $args['type_field'].
            if (array_key_exists('type_taxonomy_field', $args)) {
              $taxo_entities = $paragraph->get($args['type_field'])->referencedEntities();
              if (count($taxo_entities) > 0) {
                $type = $taxo_entities[0]->get($args['type_taxonomy_field'])->getValue()[0]['value'];
              }
            }
            else {
              $type = $paragraph->get($args['type_field'])->getValue()[0]['value'];
            }
            if (isset($type)) {
              $predicate = $args['predicate'] . ":" . $type;
              $predicate_normalized =
                NormalizerBase::escapePrefix($predicate, $context['namespaces']);
              $normalized['@graph'][0][$predicate_normalized][] = [
                '@value' => $value,
                '@language' => $lang,
              ];
            }
          }
        }
      }
    }

    // Remove empty IDs created by the paragraph entities.
    if (count($normalized['@graph']) > 1) {
      foreach ($normalized['@graph'] as $key => $grph) {
        if ($key > 0 && ($grph['@id'] === "") || (is_array($grph['@id']) && in_array("", $grph['@id']))) {
          unset($normalized['@graph'][$key]);
        }
      }
    }
  }
}
